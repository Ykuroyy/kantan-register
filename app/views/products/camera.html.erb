<div class="container" id="camera-container"
     data-mode="<%= params[:mode] %>"
     data-product-id="<%= params[:product_id] %>">

  <!-- トップへ戻る -->
  <%= link_to "トップページに戻る", root_path, class: "btn btn-gray" %>

  <h2 class="form-heading">📷 カメラで撮影</h2>

  <!-- ライブカメラカード -->
  <div class="card">

    <!-- ライブ映像 -->
    <video id="video"
           autoplay
           playsinline
           muted
           style="max-width:100%; height:auto; border-radius:12px; margin-bottom:1rem;"></video>

    <!-- 撮影ボタン -->
    <div style="text-align:center; margin-bottom:1rem;">
      <button id="capture" type="button" class="btn btn-blue">撮影する</button>
    </div>

    <!-- 戻るリンク群 -->
    <div style="text-align:center; margin-top:1rem; display:flex; gap:.6rem; flex-wrap:wrap; justify-content:center;">
      <% if params[:mode] == "edit" && params[:product_id].present? %>
        <%= link_to "商品編集に戻る", edit_product_path(params[:product_id]), class: "btn btn-gray" %>
      <% elsif params[:mode] == "new" %>
        <%= link_to "商品登録に戻る", new_product_path, class: "btn btn-gray" %>
      <% else %>
        <%= link_to "レジ画面に戻る", new_order_products_path, class: "btn btn-gray" %>
      <% end %>
    </div>
  </div>
</div>


<script>
document.addEventListener("DOMContentLoaded", () => {
  const video      = document.getElementById("video");
  const captureBtn = document.getElementById("capture");
  const container  = document.getElementById("camera-container");
  if (!video || !captureBtn || !container) return;

  /* --- 背面カメラ優先で起動 ----------------------------- */
  let stream;
  async function startCamera(tryDeviceId = false) {
    if (stream) stream.getTracks().forEach(t => t.stop());
    try {
      const constraints = tryDeviceId
        ? await rearCameraByDeviceId()
        : { video: { facingMode: { exact: "environment" } }, audio: false };
      stream = await navigator.mediaDevices.getUserMedia(constraints);
      video.srcObject = stream;
    } catch (err) {
      // if (!tryDeviceId) return startCamera(true);
      // console.error("背面カメラ取得に失敗:", err);
      // alert("背面カメラを起動できませんでした");


      // ★ ① デバイスIDで背面カメラ再試行
      if (!tryDeviceId) return startCamera(true);

      console.warn("rear camera not found, fallback to front:", err);
      // ★ ② それでも失敗したら front-camera（PC 用）へフォールバック
      try {
        const frontStream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: "user" },
          audio: false,
        });
        stream = frontStream;
        video.srcObject = stream;
        console.log("✅ front camera");
      } catch (e) {
        console.error("front camera も取得できませんでした:", e);
        alert("カメラを起動できませんでした");
      }
    }
  }
  async function rearCameraByDeviceId() {
    await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
    const devices = await navigator.mediaDevices.enumerateDevices();
    const rearCam = devices.find(d =>
      d.kind === "videoinput" && /back|rear|environment/i.test(d.label)
    );
    return rearCam
      ? { video: { deviceId: { exact: rearCam.deviceId } }, audio: false }
      : { video: true, audio: false };
  }
  startCamera();
  window.addEventListener("pagehide", () => {
    if (stream) stream.getTracks().forEach(t => t.stop());
  });
  /* ------------------------------------------------------- */

  const mode      = container.dataset.mode;
  const productId = container.dataset.productId;
  const flaskUrl  = ["localhost","127.0.0.1"].includes(location.hostname)
                    ? "http://localhost:10000"
                    : "https://ai-server-f6si.onrender.com";

  function sendCapture(blob) {
    const fd = new FormData();
    fd.append("image", blob, "capture.png");           // PNG 送信

    if (mode === "order") {
      fetch(`${flaskUrl}/predict`, { method: "POST", body: fd })
        .then(res => res.json())
        .then(json => {
          const name  = json.name  || '';
          const score = json.score || 0;
          window.location.href =
            `/products/predict_result?predicted_name=${encodeURIComponent(name)}&score=${score}`;
        })
        .catch(err => console.error("予測エラー:", err));
    } else {
      fetch("/products/capture_product", { method: "POST", body: fd })
        .then(() => {
          const url = mode === "new"
                     ? "/products/new?from_camera=1"
                     : `/products/${productId}/edit?from_camera=1`;
          window.location.href = url;
        })
        .catch(err => console.error("送信エラー:", err));
    }
  }

  /* ===== リサイズ付きキャプチャ  ===== */
  captureBtn.addEventListener("click", () => {
    const MAX   = 640;
    const scale = Math.min(MAX / video.videoWidth,
                           MAX / video.videoHeight, 1);

    const canvas = document.createElement("canvas");
    canvas.width  = Math.round(video.videoWidth  * scale);
    canvas.height = Math.round(video.videoHeight * scale);
    canvas.getContext("2d").drawImage(
      video, 0, 0, video.videoWidth, video.videoHeight,
      0, 0, canvas.width, canvas.height
    );


    const dataUrl = canvas.toDataURL("image/jpeg", 0.80);  // 80% 品質でプレビュー
    sessionStorage.setItem("capturedImage", dataUrl);


    canvas.toBlob(
      blob => sendCapture(blob),
     "image/jpeg",
     0.80                                     // 送信も 80% 品質
    );

  });
});
</script>
