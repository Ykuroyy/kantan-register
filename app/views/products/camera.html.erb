<%= link_to "トップページに戻る", root_path, class: "form-button gray" %>
<h2 class="form-heading">📷 カメラで撮影</h2>

<div id="camera-container" data-mode="<%= params[:mode] %>" data-product-id="<%= params[:product_id] %>" class="form-container">
  <div class="form-card">
    <!-- ライブカメラ映像 -->
    <video id="video" autoplay style="max-width:100%; height:auto; margin-bottom:16px;"></video>

    <!-- ボタン群 -->
    <div class="form-actions" style="justify-content:center; margin-bottom:16px;">
      <button id="capture" class="form-button blue" type="button" style="margin-right:8px;">撮影する</button>
    </div>

    <!-- プレビューエリア -->
    <div class="image-group">
      <div class="image-block">
        <p class="preview-label">プレビュー</p>
        <img id="camera-preview-image" class="preview-image" style="display:none; max-width:100%;" />
      </div>
    </div>

    <!-- 戻るリンク -->
    <div style="text-align:center; margin-top:16px;">
      <% if params[:mode] == "edit" && params[:product_id].present? %>
        <%= link_to "商品編集に戻る", edit_product_path(params[:product_id]), class: "form-button gray" %>
      <% elsif params[:mode] == "new" %>
        <%= link_to "商品登録に戻る", new_product_path, class: "form-button gray" %>
      <% else %>
        <%= link_to "レジ画面に戻る", new_order_products_path, class: "form-button gray" %>
      <% end %>
    </div>
  </div>
</div>    


<script>
  document.addEventListener("DOMContentLoaded", () => {
    const video      = document.getElementById("video");
    const captureBtn = document.getElementById("capture");
    const fileInput  = document.getElementById("upload-file");
    const preview    = document.getElementById("camera-preview-image");
    const container  = document.getElementById("camera-container");
    if (!video || !captureBtn || !container) return;

    // カメラ起動
    navigator.mediaDevices.getUserMedia({ video: true })
      .then(stream => video.srcObject = stream)
      .catch(err => console.error("カメラエラー:", err));

    const mode      = container.dataset.mode;
    const productId = container.dataset.productId;
    const isLocal   = ["localhost","127.0.0.1"].includes(location.hostname);
    const flaskUrl  = isLocal ? "http://localhost:10000" : "https://ai-server-f6si.onrender.com";

    // 撮影/送信処理
    function sendCapture(blob) {
      const fd = new FormData();
      fd.append("image", blob, "capture.png");
      if (mode === "order") {
        fetch(`${flaskUrl}/predict`, { method: "POST", body: fd })
          .then(res => res.json())
          .then(json => {
            const name  = json.name || '';
            const score = json.score || 0;
            window.location.href = `/products/predict_result?predicted_name=${encodeURIComponent(name)}&score=${score}`;
          })
          .catch(err => console.error("予測エラー:", err));
      } else {
        fetch("/products/capture_product", { method: "POST", body: fd })
          .then(() => {
            const url = mode === "new"
              ? "/products/new?from_camera=1"
              : `/products/${productId}/edit?from_camera=1`;
            window.location.href = url;
          })
          .catch(err => console.error("送信エラー:", err));
      }
    }

    // キャプチャボタンイベント
    captureBtn.addEventListener("click", () => {
      const canvas = document.createElement("canvas");
      canvas.width  = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext("2d").drawImage(video, 0, 0);
      canvas.toBlob(blob => {
        preview.src           = URL.createObjectURL(blob);
        preview.style.display = "block";
        sendCapture(blob);
      }, "image/png");
    });

    // ファイル選択イベント
    if (fileInput) {
      fileInput.addEventListener("change", e => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = evt => {
          preview.src           = evt.target.result;
          preview.style.display = "block";
        };
        reader.readAsDataURL(file);
        sendCapture(file);
      });
    }
  });
</script>
