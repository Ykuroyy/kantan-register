<h2 class="form-heading">📷 カメラで撮影</h2>

<!-- コンテナに mode と product_id を埋め込む -->
<div id="camera-container" data-mode="<%= params[:mode] %>" data-product-id="<%= params[:product_id] %>">

  <!-- 映像表示 -->
  <video id="video" width="320" height="240" autoplay></video>
  <br>

  <!-- 撮影ボタン -->
  <button id="capture">撮影する</button>

  <!-- またはファイル選択 -->
  <h3>または画像ファイルから予測</h3>
  <input type="file" id="upload-file" accept="image/*">
  <button id="predict-button">この画像で予測</button>

  <!-- 撮影結果をcanvasに描画（送信に使う） -->
  <canvas id="canvas" width="320" height="240" style="visibility:hidden;"></canvas>


  <!-- 結果表示 -->
  <p id="result" style="font-weight:bold; font-size:18px; margin-top:10px;"></p>
</div>



<script>
  document.addEventListener("DOMContentLoaded", () => {
    const video = document.getElementById("video");
    const canvas = document.getElementById("canvas");
    const context = canvas.getContext("2d");
    const resultElem = document.getElementById("result");
    const container = document.getElementById("camera-container");

    const mode = container.dataset.mode;
    const productId = container.dataset.productId;

    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      navigator.mediaDevices.getUserMedia({ video: true })
        .then((stream) => {
          video.srcObject = stream;
        })
        .catch((err) => {
          alert("カメラが使用できません: " + err);
        });
    }

    document.getElementById("capture").addEventListener("click", () => {
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      canvas.toBlob((blob) => {
        sendImageToPredict(blob);
      }, "image/png");
    });

    document.getElementById("predict-button").addEventListener("click", () => {
      const file = document.getElementById("upload-file").files[0];
      if (!file) {
        alert("画像ファイルを選択してください");
        return;
      }
      sendImageToPredict(file);
    });




  function sendImageToPredict(blob) {
    resultElem.textContent = "画像を認識中です...";
    resultElem.style.color = "gray";

    const formData = new FormData();
    formData.append("image", blob, "photo.png");

    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");

    // Flask予測APIのエンドポイント（Railsの/predictアクション）
    const endpoint = "/image_predict";

    fetch(endpoint, {
      method: "POST",
      body: formData,
      headers: {
        "X-CSRF-Token": csrfToken
      },
      credentials: "same-origin"
    })
    .then(response => {
      if (!response.ok) throw new Error("サーバーエラー：" + response.status);
      return response.text(); // ★ HTMLとして受け取る（predict_result.html.erb）
    })
    .then(html => {
      document.open();
      document.write(html);
      document.close();
    })
    .catch(error => {
      resultElem.textContent = "エラーが発生しました: " + error.message;
      resultElem.style.color = "red";
    });
  }

      
</script>




   


      
  



<!-- 戻り先ボタン -->
<% if params[:mode] == "edit" && params[:product_id].present? %>
  <%= link_to "商品編集に戻る", edit_product_path(params[:product_id]), class: "form-button gray" %>
<% elsif params[:mode] == "new" %>
  <%= link_to "商品登録に戻る", new_product_path, class: "form-button gray" %>
<% else %>
  <%= link_to "レジ画面に戻る", new_order_path, class: "form-button gray" %>
<% end %>
